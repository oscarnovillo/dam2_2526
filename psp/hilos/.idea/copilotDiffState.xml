<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/blocking_queue/MetodosBlockingQueue.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/blocking_queue/MetodosBlockingQueue.java" />
              <option name="updatedContent" value="package blocking_queue;&#10;&#10;import java.util.concurrent.ArrayBlockingQueue;&#10;import java.util.concurrent.BlockingQueue;&#10;import java.util.concurrent.TimeUnit;&#10;&#10;/**&#10; * Demostración de los diferentes métodos de BlockingQueue&#10; */&#10;public class MetodosBlockingQueue {&#10;    &#10;    public static void main(String[] args) {&#10;        System.out.println(&quot;=== MÉTODOS DE BLOCKING QUEUE ===\n&quot;);&#10;        &#10;        // Cola con capacidad de 3 elementos&#10;        BlockingQueue&lt;String&gt; cola = new ArrayBlockingQueue&lt;&gt;(3);&#10;        &#10;        demostrarMetodosInsercion(cola);&#10;        System.out.println();&#10;        demostrarMetodosExtraccion(cola);&#10;        System.out.println();&#10;        demostrarMetodosConTimeout(cola);&#10;    }&#10;    &#10;    /**&#10;     * Demuestra los diferentes métodos para insertar elementos&#10;     */&#10;    private static void demostrarMetodosInsercion(BlockingQueue&lt;String&gt; cola) {&#10;        System.out.println(&quot;--- MÉTODOS DE INSERCIÓN ---&quot;);&#10;        &#10;        try {&#10;            // 1. add() - Lanza excepción si la cola está llena&#10;            System.out.println(&quot;1. add(): &quot; + cola.add(&quot;Elemento1&quot;)); // true&#10;            System.out.println(&quot;   Tamaño: &quot; + cola.size());&#10;            &#10;            // 2. offer() - Retorna false si la cola está llena&#10;            System.out.println(&quot;2. offer(): &quot; + cola.offer(&quot;Elemento2&quot;)); // true&#10;            System.out.println(&quot;   Tamaño: &quot; + cola.size());&#10;            &#10;            // 3. put() - Bloquea si la cola está llena&#10;            cola.put(&quot;Elemento3&quot;);&#10;            System.out.println(&quot;3. put(): Elemento3 añadido&quot;);&#10;            System.out.println(&quot;   Tamaño: &quot; + cola.size() + &quot; (COLA LLENA)&quot;);&#10;            &#10;            // Ahora la cola está llena (capacidad 3)&#10;            &#10;            // 4. Intentar add() con cola llena&#10;            try {&#10;                cola.add(&quot;Elemento4&quot;);&#10;            } catch (IllegalStateException e) {&#10;                System.out.println(&quot;4. add() con cola llena: &quot; + e.getClass().getSimpleName());&#10;            }&#10;            &#10;            // 5. Intentar offer() con cola llena&#10;            System.out.println(&quot;5. offer() con cola llena: &quot; + cola.offer(&quot;Elemento4&quot;)); // false&#10;            &#10;            // 6. offer() con timeout&#10;            System.out.println(&quot;6. offer() con timeout de 1 segundo...&quot;);&#10;            long inicio = System.currentTimeMillis();&#10;            boolean resultado = cola.offer(&quot;Elemento4&quot;, 1, TimeUnit.SECONDS);&#10;            long tiempo = System.currentTimeMillis() - inicio;&#10;            System.out.println(&quot;   Resultado: &quot; + resultado + &quot; (Tiempo: &quot; + tiempo + &quot;ms)&quot;);&#10;            &#10;        } catch (InterruptedException e) {&#10;            Thread.currentThread().interrupt();&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Demuestra los diferentes métodos para extraer elementos&#10;     */&#10;    private static void demostrarMetodosExtraccion(BlockingQueue&lt;String&gt; cola) {&#10;        System.out.println(&quot;--- MÉTODOS DE EXTRACCIÓN ---&quot;);&#10;        &#10;        try {&#10;            // 1. remove() - Lanza excepción si la cola está vacía&#10;            System.out.println(&quot;1. remove(): &quot; + cola.remove());&#10;            System.out.println(&quot;   Tamaño: &quot; + cola.size());&#10;            &#10;            // 2. poll() - Retorna null si la cola está vacía&#10;            System.out.println(&quot;2. poll(): &quot; + cola.poll());&#10;            System.out.println(&quot;   Tamaño: &quot; + cola.size());&#10;            &#10;            // 3. take() - Bloquea si la cola está vacía&#10;            System.out.println(&quot;3. take(): &quot; + cola.take());&#10;            System.out.println(&quot;   Tamaño: &quot; + cola.size() + &quot; (COLA VACÍA)&quot;);&#10;            &#10;            // Ahora la cola está vacía&#10;            &#10;            // 4. Intentar remove() con cola vacía&#10;            try {&#10;                cola.remove();&#10;            } catch (Exception e) {&#10;                System.out.println(&quot;4. remove() con cola vacía: &quot; + e.getClass().getSimpleName());&#10;            }&#10;            &#10;            // 5. Intentar poll() con cola vacía&#10;            System.out.println(&quot;5. poll() con cola vacía: &quot; + cola.poll()); // null&#10;            &#10;        } catch (InterruptedException e) {&#10;            Thread.currentThread().interrupt();&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Demuestra métodos con timeout&#10;     */&#10;    private static void demostrarMetodosConTimeout(BlockingQueue&lt;String&gt; cola) {&#10;        System.out.println(&quot;--- MÉTODOS CON TIMEOUT ---&quot;);&#10;        &#10;        try {&#10;            // poll() con timeout en cola vacía&#10;            System.out.println(&quot;1. poll() con timeout de 2 segundos en cola vacía...&quot;);&#10;            long inicio = System.currentTimeMillis();&#10;            String resultado = cola.poll(2, TimeUnit.SECONDS);&#10;            long tiempo = System.currentTimeMillis() - inicio;&#10;            System.out.println(&quot;   Resultado: &quot; + resultado + &quot; (Tiempo: &quot; + tiempo + &quot;ms)&quot;);&#10;            &#10;            // Añadir un elemento para la siguiente prueba&#10;            cola.offer(&quot;ElementoTest&quot;);&#10;            &#10;            // poll() con timeout en cola con elementos&#10;            System.out.println(&quot;2. poll() con timeout en cola con elementos:&quot;);&#10;            System.out.println(&quot;   Resultado: &quot; + cola.poll(1, TimeUnit.SECONDS));&#10;            &#10;        } catch (InterruptedException e) {&#10;            Thread.currentThread().interrupt();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>